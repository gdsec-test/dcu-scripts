name: GCI Image Check
on:
  workflow_dispatch:
  schedule:
    - cron:  '20 14 * * MON'
jobs:
  scale-out-runner:
    concurrency: main
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout DCU actions
        uses: actions/checkout@v2
        with:
          repository: gdcorp-infosec/dcu-actions
          token: ${{ secrets.REPO_PAT }}
          path: local-actions/dcu-actions
      - name: Scale Runners
        uses: ./local-actions/dcu-actions/scale
        with:
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID_CICD }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD }}
          aws-deploy-role: ${{ secrets.AWS_DEPLOY_ROLE_CICD }}
          repo-pat: ${{ secrets.REPO_PAT }}
  generate-stats:
    concurrency: main
    runs-on: [ec2ubuntu]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CICD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_CICD }}
          role-duration-seconds: 900
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.3.3
      - name: Docker login for Golden Containers ECR
        env:
          ECR_REGISTRY: 764525110978.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com
        run: |
          echo "Using: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - name: Docker login for Artifactory
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PASSWORD} docker-dcu-local.artifactory.secureserver.net
      - name: Check and rebuild images
        run: cd containers && ./build.sh
        env:
          SLACK_CHANNEL: customer_protection
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
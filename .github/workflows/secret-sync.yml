name: Run secret syncs
on:
  schedule:
    - cron: "0 13 * * 2"
  workflow_dispatch:
jobs:
  sync:
    runs-on: [csetubuntu]
    steps:
      - name: Assume deploy role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::233599685880:role/GD-AWS-USA-GD-dcuabuse-CICD-Deploy
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: us-west-2
      - uses: actions/checkout@v2
      - uses: azure/setup-kubectl@v3.0
        with:
          version: 'v1.24.4'
      - name: Configure kubeconfigs
        run: |
          export AWS_REGION='us-west-2'
          aws secretsmanager get-secret-value --region us-west-2 --secret-id /KeePass/K8s/dev-ng-client.crt | jq -r '.SecretString' > ./.github/static/dev-ng-client.crt
          aws secretsmanager get-secret-value --region us-west-2 --secret-id /KeePass/K8s/dev-ng-client.key | jq -r '.SecretString' > ./.github/static/dev-ng-client.key
          aws secretsmanager get-secret-value --region us-west-2 --secret-id /KeePass/K8s/prod-ng-client.crt | jq -r '.SecretString' > ./.github/static/prod-ng-client.crt
          aws secretsmanager get-secret-value --region us-west-2 --secret-id /KeePass/K8s/prod-ng-client.key | jq -r '.SecretString' > ./.github/static/prod-ng-client.key
          echo "KUBECONFIG=$PWD/.github/static/local-config.yml" >> $GITHUB_ENV
      - name: Get Secrets
        id: secrets
        run: |
          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/GitHub/GitHub-Actions-Runner-PAT' --query 'SecretString' --output text)
          PAT=$(echo ${SECRET} | jq -r .PAT)
          echo "::set-output name=pat-cloud::${PAT}"
          echo "::add-mask::$PAT"

          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/Secrets/slack' --query 'SecretString' --output text)
          SLACK_WEBHOOK_URL=$(echo ${SECRET} | jq -r .webhook)
          echo "::set-output name=slack-webhook-url::${SLACK_WEBHOOK_URL}"
          echo "::add-mask::$SLACK_WEBHOOK_URL"
      - name: Get JOMAX Service account credentials
        id: jomax
        run: |
          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/KeePass/svc-accounts/aws-abuse-pipeline' --query 'SecretString' --output text)
          JOMAX_USERNAME=$(echo ${SECRET} | jq -r .username)
          JOMAX_PASSWORD=$(echo ${SECRET} | jq -r .password)
          echo "::set-output name=jomax-user::${JOMAX_USERNAME}"
          echo "::set-output name=jomax-password::${JOMAX_PASSWORD}"
          echo "::add-mask::$JOMAX_USERNAME"
          echo "::add-mask::$JOMAX_PASSWORD"
      - name: Get SSO token for jomax service account
        id: sso-token
        run: |
          while [[ -z "$SSO_RESPONSE" ]]
          do
              SSO_RESPONSE=`curl -X POST https://sso.godaddy.com/v1/api/token -H 'Content-Type: application/json' -d '{"username":"${{ steps.jomax.outputs.jomax-user }}","password":"${{ steps.jomax.outputs.jomax-password }}","realm":"jomax"}'`
              echo ${SSO_RESPONSE}
              if [[ -z "${SSO_RESPONSE}" ]]; then sleep 1; fi
          done
          SSO_TOKEN=`echo $SSO_RESPONSE | jq -r .data`
          echo "::set-output name=sso-token::$SSO_TOKEN"
          echo "::add-mask::$SSO_TOKEN"
      - name: Checkout SSL Action Repo
        uses: actions/checkout@v2
        with:
          repository: gdcorp-actions/ssl-action
          path: ./ssl-action
          token: ${{ steps.secrets.outputs.pat-cloud }}
      - name: Checkout DCU actions
        uses: actions/checkout@v2
        with:
          repository: gdcorp-infosec/dcu-actions
          token: ${{ steps.secrets.outputs.pat-cloud }}
          path: local-actions/dcu-actions
      - name: Sync MongoDB Beat Credentials
        env:
          AWS_REGION: us-west-2
        run: |
          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/KeePass/MongoDB/phishstory/dev/metricbeat' --query 'SecretString' --output text)
          URL=$(echo ${SECRET} | jq -r .url)
          echo "::add-mask::$URL"

          kubectl --context=dev-dcu -n monitoring create secret generic mongodb-metricbeat --from-literal=url="$URL" --dry-run -o yaml | kubectl --context=dev-dcu apply -f -
          kubectl --context=dev-dcu delete pod -l k8s-app=metricbeat -n monitoring

          kubectl --context=prod-cset -n monitoring create secret generic mongodb-metricbeat --from-literal=url="$URL" --dry-run -o yaml | kubectl --context=prod-cset apply -f -
          kubectl --context=prod-cset delete pod -l k8s-app=metricbeat -n monitoring
      - name: Sync RabbitMQ Beat Credentials
        env:
          AWS_REGION: us-west-2
        run: |
          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/KeePass/tools/rabbitmq-console' --query 'SecretString' --output text)
          USER=$(echo ${SECRET} | jq -r .username)
          PASS=$(echo ${SECRET} | jq -r .password)
          echo "::add-mask::$USER"
          echo "::add-mask::$PASS"

          kubectl --context=dev-dcu -n monitoring create secret generic rabbitmq-secrets --from-literal=username="$USER" --from-literal=password="$PASS" --dry-run -o yaml | kubectl --context=dev-dcu apply -f -
          kubectl --context=dev-dcu delete pod -l k8s-app=metricbeat -n monitoring

          kubectl --context=prod-cset -n monitoring create secret generic rabbitmq-secrets --from-literal=username="$USER" --from-literal=password="$PASS" --dry-run -o yaml | kubectl --context=prod-cset apply -f -
          kubectl --context=prod-cset delete pod -l k8s-app=metricbeat -n monitoring

          OPENCTISECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/KeePass/RabbitMQOpencti' --query 'SecretString' --output text)
          USER=$(echo ${OPENCTISECRET} | jq -r .username)
          PASS=$(echo ${OPENCTISECRET} | jq -r .password)
          echo "::add-mask::$USER"
          echo "::add-mask::$PASS"

          kubectl --context=dev-dcu -n opencti create secret generic rabbitmq-secrets --from-literal=username="$USER" --from-literal=password="$PASS" --dry-run -o yaml | kubectl --context=dev-dcu apply -f -
          kubectl --context=dev-dcu delete pod -l k8s-app=opencti -n opencti

          kubectl --context=prod-cset -n opencti create secret generic rabbitmq-secrets --from-literal=username="$USER" --from-literal=password="$PASS" --dry-run -o yaml | kubectl --context=prod-cset apply -f -
          kubectl --context=prod-cset delete pod -l k8s-app=opencti -n opencti
      - name: Sync Netbox Creds
        env:
          AWS_REGION: us-west-2
        run: |
          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/KeePass/Netbox/token' --query 'SecretString' --output text)
          TOKEN=$(echo ${SECRET} | jq -r .token)
          echo "::add-mask::$TOKEN"

          kubectl --context=dev-cset create secret generic netbox-token --from-literal=token="$TOKEN" --dry-run -o yaml | kubectl --context=dev-cset apply -f -
          kubectl --context=test-cset create secret generic netbox-token --from-literal=token="$TOKEN" --dry-run -o yaml | kubectl --context=test-cset apply -f -
          kubectl --context=ote-cset create secret generic netbox-token --from-literal=token="$TOKEN" --dry-run -o yaml | kubectl --context=ote-cset apply -f -
          kubectl --context=prod-cset create secret generic netbox-token --from-literal=token="$TOKEN" --dry-run -o yaml | kubectl --context=prod-cset apply -f -
      - name: Sync CMAP IAM user
        env:
          AWS_REGION: us-west-2
        run: |
          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/ESSP/dev-cmap-iam-user' --query 'SecretString' --output text)
          AccessKey=$(echo ${SECRET} | jq -r .AccessKeyId)
          echo "::add-mask::$AccessKey"
          SecretAccessKey=$(echo ${SECRET} | jq -r .SecretAccessKey)
          echo "::add-mask::$SecretAccessKey"
          kubectl --context=dev-cset create secret generic cmap-iam-user --from-literal=accesskey="$AccessKey" --from-literal=secretaccesskey="$SecretAccessKey" --dry-run -o yaml | kubectl --context=dev-cset apply -f -
          kubectl --context=test-cset create secret generic cmap-iam-user --from-literal=accesskey="$AccessKey" --from-literal=secretaccesskey="$SecretAccessKey" --dry-run -o yaml | kubectl --context=test-cset apply -f -

          SECRET=$(aws secretsmanager get-secret-value --region us-west-2 --secret-id '/ESSP/prod-cmap-iam-user' --query 'SecretString' --output text)
          AccessKey=$(echo ${SECRET} | jq -r .AccessKeyId)
          echo "::add-mask::$AccessKey"
          SecretAccessKey=$(echo ${SECRET} | jq -r .SecretAccessKey)
          echo "::add-mask::$SecretAccessKey"
          kubectl --context=ote-cset create secret generic cmap-iam-user --from-literal=accesskey="$AccessKey" --from-literal=secretaccesskey="$SecretAccessKey" --dry-run -o yaml | kubectl --context=ote-cset apply -f -
          kubectl --context=prod-cset create secret generic cmap-iam-user --from-literal=accesskey="$AccessKey" --from-literal=secretaccesskey="$SecretAccessKey" --dry-run -o yaml | kubectl --context=prod-cset apply -f -
      - name: Create/Renew dev rmq certs
        uses: ./ssl-action
        with:
          command: import-secrets
          certificates: '[{"server":"*.rmq.cset.int.dev-gdcorp.tools","allow_renewal":true}]'
          team: org-infosec-software-engineering
          renew: true
          sso_token: ${{ steps.sso-token.outputs.sso-token }}
          renewal_days: 90
      - name: Create/Renew prod rmq certs
        uses: ./ssl-action
        with:
          command: import-secrets
          certificates: '[{"server":"*.rmq.cset.int.gdcorp.tools","allow_renewal":true}]'
          team: org-infosec-software-engineering
          renew: true
          sso_token: ${{ steps.sso-token.outputs.sso-token }}
          renewal_days: 90
      - name: Create/Renew mongodb dev server cert
        uses: ./ssl-action
        with:
          command: import-secrets
          certificates: '[{"server":"mongodb.cset.int.dev-gdcorp.tools","allow_renewal":true}]'
          team: org-infosec-software-engineering
          renew: true
          sso_token: ${{ steps.sso-token.outputs.sso-token }}
          renewal_days: 90
      - name: Create/Renew mongodb dev server cert
        uses: ./ssl-action
        with:
          command: import-secrets
          certificates: '[{"server":"common.mongodb.cset.int.dev-gdcorp.tools","allow_renewal":true}]'
          team: org-infosec-software-engineering
          renew: true
          sso_token: ${{ steps.sso-token.outputs.sso-token }}
          renewal_days: 90
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: essp-stats.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-dcu
          namespace: abuse-api-dev
          secret-name: tls-essp-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: essp-stats.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-essp-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: "*.cset.int.dev-gdcorp.tools"
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-dcu
          namespace: abuse-api-dev
          secret-name: cset-wildcard
          secret-type: tls
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: "*.cset.int.test-gdcorp.tools"
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-dcu
          namespace: abuse-api-test
          secret-name: cset-wildcard
          secret-type: tls
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: "*.cset.int.ote-gdcorp.tools"
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-ote
          secret-name: cset-wildcard
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: "*.cset.int.gdcorp.tools"
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod,auth-proxy
          secret-name: cset-wildcard
          secret-type: tls
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: shoplocked.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-shoplocked-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: shoplocked.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-shoplocked-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: shoplocked.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-shoplocked-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: shoplocked.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-shoplocked-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: middleware.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-middleware-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: middleware.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-middleware-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: middleware.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-middleware-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: middleware.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-middleware-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: microprod-reporter.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-microprod-reporter-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: microprod-reporter.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-microprod-reporter-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: microprod-reporter.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-microprod-reporter-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: microprod-reporter.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-microprod-reporter-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: irm.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-irm-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: irm.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-irm-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: irm.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-irm-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: irm.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-irm-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: ams.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-ams-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: ams.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-ams-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: ams.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-ams-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: ams.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-ams-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: zeus.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-zeus-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: zeus.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-zeus-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: zeus.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-zeus-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: zeus.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-zeus-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: crmalert.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-crmalert-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: crmalert.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-crmalert-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: crmalert.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-crmalert-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: crmalert.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-crmalert-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: cmapservice.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-cmapservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: cmapservice.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-cmapservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: cmapservice.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-cmapservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: cmapservice.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-cmapservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: godaddy-service.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-godaddy-service-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: godaddy-service.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-godaddy-service-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: godaddy-service.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-godaddy-service-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: godaddy-service.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-godaddy-service-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: testing.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-testing
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: domainservice.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-domainservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: domainservice.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-domainservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: domainservice.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-domainservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: domainservice.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-domainservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: brandservice.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-brandservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: brandservice.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-brandservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: brandservice.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-brandservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: brandservice.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-brandservice-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: sharktales.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-sharktales-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: sharktales.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-sharktales-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: sharktales.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-sharktales-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: sharktales.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-sharktales-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: phishstory.client.cset.int.dev-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: dev-cset
          namespace: abuse-api-dev
          secret-name: tls-phishnet-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: phishstory.client.cset.int.test-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: test-cset
          namespace: abuse-api-test
          secret-name: tls-phishnet-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: phishstory.client.cset.int.ote-gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: ote-cset
          namespace: abuse-api-ote
          secret-name: tls-phishnet-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
      - uses: ./local-actions/dcu-actions/certs-kube
        with:
          cert: phishstory.client.cset.int.gdcorp.tools
          jwt: ${{ steps.sso-token.outputs.sso-token }}
          group: org-infosec-software-engineering
          context: prod-cset
          namespace: abuse-api-prod
          secret-name: tls-phishnet-client-cert
          secret-type: opaque
          slack-webhook: ${{ steps.secrets.outputs.slack-webhook-url }}
